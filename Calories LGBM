{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91716,"databundleVersionId":11893428,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tfa\nfrom tensorflow import keras\nimport lightgbm as lgb","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:34:47.015020Z","iopub.execute_input":"2025-05-21T11:34:47.015376Z","iopub.status.idle":"2025-05-21T11:34:53.707122Z","shell.execute_reply.started":"2025-05-21T11:34:47.015352Z","shell.execute_reply":"2025-05-21T11:34:53.706078Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# read csv\n\ntrain_file_path = \"/kaggle/input/playground-series-s5e5/train.csv\"\ntest_file_path = \"/kaggle/input/playground-series-s5e5/test.csv\"\nsample_subbission_file_path = \"/kaggle/input/playground-series-s5e5/sample_submission.csv\"\n\n\ntrain_dataset = pd.read_csv(train_file_path)\ntest_dataset = pd.read_csv(test_file_path)\nsample_submission = pd.read_csv(sample_subbission_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:11.265133Z","iopub.execute_input":"2025-05-21T11:33:11.265934Z","iopub.status.idle":"2025-05-21T11:33:12.680880Z","shell.execute_reply.started":"2025-05-21T11:33:11.265902Z","shell.execute_reply":"2025-05-21T11:33:12.679798Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"print(\"train dataset head \\n \\n\" , train_dataset.head(10), \"\\n\")\n\nprint(\"train dataset head \\n \\n\" , train_dataset.shape, \"\\n\")\n\nprint(\"train dataset info \\n\" , train_dataset.info(), \" \\n\")\n\nprint(\"\\n\")\nprint(train_dataset.sort_values(by=['Calories']))\nprint(\"\\n\")\n\nsample_submission.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:12.681632Z","iopub.execute_input":"2025-05-21T11:33:12.682159Z","iopub.status.idle":"2025-05-21T11:33:12.998119Z","shell.execute_reply.started":"2025-05-21T11:33:12.682112Z","shell.execute_reply":"2025-05-21T11:33:12.997149Z"}},"outputs":[{"name":"stdout","text":"train dataset head \n \n    id     Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  Calories\n0   0    male   36   189.0    82.0      26.0       101.0       41.0     150.0\n1   1  female   64   163.0    60.0       8.0        85.0       39.7      34.0\n2   2  female   51   161.0    64.0       7.0        84.0       39.8      29.0\n3   3    male   20   192.0    90.0      25.0       105.0       40.7     140.0\n4   4  female   38   166.0    61.0      25.0       102.0       40.6     146.0\n5   5  female   26   156.0    56.0      19.0       100.0       40.5     103.0\n6   6  female   21   172.0    73.0       3.0        81.0       38.3       9.0\n7   7    male   46   188.0    94.0      23.0       100.0       40.8     145.0\n8   8  female   33   166.0    63.0      25.0       107.0       40.5     161.0\n9   9    male   65   185.0    88.0      23.0       104.0       41.0     185.0 \n\ntrain dataset head \n \n (750000, 9) \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 9 columns):\n #   Column      Non-Null Count   Dtype  \n---  ------      --------------   -----  \n 0   id          750000 non-null  int64  \n 1   Sex         750000 non-null  object \n 2   Age         750000 non-null  int64  \n 3   Height      750000 non-null  float64\n 4   Weight      750000 non-null  float64\n 5   Duration    750000 non-null  float64\n 6   Heart_Rate  750000 non-null  float64\n 7   Body_Temp   750000 non-null  float64\n 8   Calories    750000 non-null  float64\ndtypes: float64(6), int64(2), object(1)\nmemory usage: 51.5+ MB\ntrain dataset info \n None  \n\n\n\n            id   Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n149907  149907  male   20   173.0    72.0       1.0        72.0       37.9   \n305204  305204  male   20   183.0    78.0       1.0        76.0       37.7   \n675677  675677  male   25   183.0    79.0       1.0        78.0       37.7   \n449312  449312  male   21   183.0    81.0       1.0        75.0       37.8   \n256166  256166  male   24   187.0    81.0       1.0        76.0       37.7   \n...        ...   ...  ...     ...     ...       ...         ...        ...   \n68802    68802  male   29   202.0    99.0      29.0       120.0       40.7   \n460611  460611  male   76   199.0    98.0      29.0       123.0       40.8   \n530685  530685  male   75   199.0   103.0      30.0       123.0       40.5   \n184638  184638  male   79   188.0    90.0      28.0       123.0       41.0   \n427712  427712  male   69   201.0    99.0      29.0       111.0       41.1   \n\n        Calories  \n149907       1.0  \n305204       1.0  \n675677       1.0  \n449312       1.0  \n256166       1.0  \n...          ...  \n68802      314.0  \n460611     314.0  \n530685     314.0  \n184638     314.0  \n427712     314.0  \n\n[750000 rows x 9 columns]\n\n\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"       id  Calories\n0  750000    88.283\n1  750001    88.283\n2  750002    88.283\n3  750003    88.283\n4  750004    88.283","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>88.283</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"### Prepare the dataset\n\n- hot encode sex to be 1 or 0 (1 if male)\n- pop the id column","metadata":{}},{"cell_type":"code","source":"def hot_encode_sex(dataset):\n    dataset[\"Sex\"] = dataset[\"Sex\"] == \"male\"\n    dataset[\"Sex\"] = (dataset[\"Sex\"]).astype('int64')\n    return dataset\n\ndef pop_id(dataset):\n    dataset.pop(\"id\")\n    return dataset\n\n\ndef prepare_dataset(dataset):\n    hot_encode_sex(dataset)\n    pop_id(dataset)\n    return dataset\n\nprepare_dataset(train_dataset)\nhot_encode_sex(test_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:12.999525Z","iopub.execute_input":"2025-05-21T11:33:12.999944Z","iopub.status.idle":"2025-05-21T11:33:13.109670Z","shell.execute_reply.started":"2025-05-21T11:33:12.999910Z","shell.execute_reply":"2025-05-21T11:33:13.108626Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp\n0       750000    1   45   177.0    81.0       7.0        87.0       39.8\n1       750001    1   26   200.0    97.0      20.0       101.0       40.5\n2       750002    0   29   188.0    85.0      16.0       102.0       40.4\n3       750003    0   39   172.0    73.0      20.0       107.0       40.6\n4       750004    0   30   173.0    67.0      16.0        94.0       40.5\n...        ...  ...  ...     ...     ...       ...         ...        ...\n249995  999995    0   56   159.0    62.0       6.0        85.0       39.4\n249996  999996    1   32   202.0   101.0       3.0        84.0       38.4\n249997  999997    0   31   164.0    64.0      14.0        98.0       40.1\n249998  999998    0   62   158.0    61.0      25.0       106.0       40.7\n249999  999999    1   31   199.0    96.0      15.0        98.0       39.9\n\n[250000 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Duration</th>\n      <th>Heart_Rate</th>\n      <th>Body_Temp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>1</td>\n      <td>45</td>\n      <td>177.0</td>\n      <td>81.0</td>\n      <td>7.0</td>\n      <td>87.0</td>\n      <td>39.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>1</td>\n      <td>26</td>\n      <td>200.0</td>\n      <td>97.0</td>\n      <td>20.0</td>\n      <td>101.0</td>\n      <td>40.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>0</td>\n      <td>29</td>\n      <td>188.0</td>\n      <td>85.0</td>\n      <td>16.0</td>\n      <td>102.0</td>\n      <td>40.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>0</td>\n      <td>39</td>\n      <td>172.0</td>\n      <td>73.0</td>\n      <td>20.0</td>\n      <td>107.0</td>\n      <td>40.6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>0</td>\n      <td>30</td>\n      <td>173.0</td>\n      <td>67.0</td>\n      <td>16.0</td>\n      <td>94.0</td>\n      <td>40.5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>249995</th>\n      <td>999995</td>\n      <td>0</td>\n      <td>56</td>\n      <td>159.0</td>\n      <td>62.0</td>\n      <td>6.0</td>\n      <td>85.0</td>\n      <td>39.4</td>\n    </tr>\n    <tr>\n      <th>249996</th>\n      <td>999996</td>\n      <td>1</td>\n      <td>32</td>\n      <td>202.0</td>\n      <td>101.0</td>\n      <td>3.0</td>\n      <td>84.0</td>\n      <td>38.4</td>\n    </tr>\n    <tr>\n      <th>249997</th>\n      <td>999997</td>\n      <td>0</td>\n      <td>31</td>\n      <td>164.0</td>\n      <td>64.0</td>\n      <td>14.0</td>\n      <td>98.0</td>\n      <td>40.1</td>\n    </tr>\n    <tr>\n      <th>249998</th>\n      <td>999998</td>\n      <td>0</td>\n      <td>62</td>\n      <td>158.0</td>\n      <td>61.0</td>\n      <td>25.0</td>\n      <td>106.0</td>\n      <td>40.7</td>\n    </tr>\n    <tr>\n      <th>249999</th>\n      <td>999999</td>\n      <td>1</td>\n      <td>31</td>\n      <td>199.0</td>\n      <td>96.0</td>\n      <td>15.0</td>\n      <td>98.0</td>\n      <td>39.9</td>\n    </tr>\n  </tbody>\n</table>\n<p>250000 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"test_id_column = test_dataset.pop(\"id\")\ntest_id_column","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:13.111790Z","iopub.execute_input":"2025-05-21T11:33:13.112111Z","iopub.status.idle":"2025-05-21T11:33:13.121527Z","shell.execute_reply.started":"2025-05-21T11:33:13.112087Z","shell.execute_reply":"2025-05-21T11:33:13.120347Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"0         750000\n1         750001\n2         750002\n3         750003\n4         750004\n           ...  \n249995    999995\n249996    999996\n249997    999997\n249998    999998\n249999    999999\nName: id, Length: 250000, dtype: int64"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"### Create the target dataset\n\nWith two columns, ID and Calories\n- pop calories","metadata":{}},{"cell_type":"code","source":"def create_target_dataset(calories_dataset):\n    isAppendingID = False\n    \n    calories_dataset = train_dataset.pop(\"Calories\")\n    calories_dataset = calories_dataset.to_frame()\n    # calories_dataset = calories_dataset.assign(id=train_dataset[\"id\"])\n    if (isAppendingID == True):\n        calories_dataset[\"id\"] = train_dataset[\"id\"]\n        calories_dataset = calories_dataset[[\"id\", \"Calories\"]]\n    return calories_dataset\n\ncalories_dataset = create_target_dataset(create_target_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:13.122542Z","iopub.execute_input":"2025-05-21T11:33:13.122866Z","iopub.status.idle":"2025-05-21T11:33:13.146000Z","shell.execute_reply.started":"2025-05-21T11:33:13.122832Z","shell.execute_reply":"2025-05-21T11:33:13.144817Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"calories_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:33:13.147057Z","iopub.execute_input":"2025-05-21T11:33:13.147424Z","iopub.status.idle":"2025-05-21T11:33:13.171976Z","shell.execute_reply.started":"2025-05-21T11:33:13.147394Z","shell.execute_reply":"2025-05-21T11:33:13.170658Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   Calories\n0     150.0\n1      34.0\n2      29.0\n3     140.0\n4     146.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>34.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>140.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>146.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"### Define LGBM Model\n\n","metadata":{}},{"cell_type":"code","source":"model = lgb.LGBMRegressor()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:43:07.789839Z","iopub.execute_input":"2025-05-21T11:43:07.790188Z","iopub.status.idle":"2025-05-21T11:43:07.796147Z","shell.execute_reply.started":"2025-05-21T11:43:07.790162Z","shell.execute_reply":"2025-05-21T11:43:07.794884Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"### Train Model","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"model.fit(train_dataset, calories_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:43:09.817694Z","iopub.execute_input":"2025-05-21T11:43:09.818064Z","iopub.status.idle":"2025-05-21T11:43:13.380437Z","shell.execute_reply.started":"2025-05-21T11:43:09.818038Z","shell.execute_reply":"2025-05-21T11:43:13.379480Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.013927 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 357\n[LightGBM] [Info] Number of data points in the train set: 750000, number of used features: 7\n[LightGBM] [Info] Start training from score 88.282781\n","output_type":"stream"},{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"LGBMRegressor()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":14}]}