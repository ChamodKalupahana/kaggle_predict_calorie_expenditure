{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e96ddf18",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-22T11:46:34.979383Z",
     "iopub.status.busy": "2025-05-22T11:46:34.979038Z",
     "iopub.status.idle": "2025-05-22T11:47:09.288262Z",
     "shell.execute_reply": "2025-05-22T11:47:09.287131Z"
    },
    "papermill": {
     "duration": 34.317852,
     "end_time": "2025-05-22T11:47:09.290136",
     "exception": false,
     "start_time": "2025-05-22T11:46:34.972284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-22 11:46:40.650734: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1747914401.017479      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1747914401.110272      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import tensorflow as tfa\n",
    "from tensorflow import keras\n",
    "import lightgbm as lgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5cc61cc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:09.299605Z",
     "iopub.status.busy": "2025-05-22T11:47:09.298736Z",
     "iopub.status.idle": "2025-05-22T11:47:10.607992Z",
     "shell.execute_reply": "2025-05-22T11:47:10.606725Z"
    },
    "papermill": {
     "duration": 1.31559,
     "end_time": "2025-05-22T11:47:10.609758",
     "exception": false,
     "start_time": "2025-05-22T11:47:09.294168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# read csv\n",
    "\n",
    "train_file_path = \"/kaggle/input/playground-series-s5e5/train.csv\"\n",
    "test_file_path = \"/kaggle/input/playground-series-s5e5/test.csv\"\n",
    "sample_subbission_file_path = \"/kaggle/input/playground-series-s5e5/sample_submission.csv\"\n",
    "\n",
    "\n",
    "train_dataset = pd.read_csv(train_file_path)\n",
    "test_dataset = pd.read_csv(test_file_path)\n",
    "sample_submission = pd.read_csv(sample_subbission_file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e3bd1b6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:10.618793Z",
     "iopub.status.busy": "2025-05-22T11:47:10.618499Z",
     "iopub.status.idle": "2025-05-22T11:47:10.931205Z",
     "shell.execute_reply": "2025-05-22T11:47:10.930096Z"
    },
    "papermill": {
     "duration": 0.318815,
     "end_time": "2025-05-22T11:47:10.932637",
     "exception": false,
     "start_time": "2025-05-22T11:47:10.613822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train dataset head \n",
      " \n",
      "    id     Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  Calories\n",
      "0   0    male   36   189.0    82.0      26.0       101.0       41.0     150.0\n",
      "1   1  female   64   163.0    60.0       8.0        85.0       39.7      34.0\n",
      "2   2  female   51   161.0    64.0       7.0        84.0       39.8      29.0\n",
      "3   3    male   20   192.0    90.0      25.0       105.0       40.7     140.0\n",
      "4   4  female   38   166.0    61.0      25.0       102.0       40.6     146.0\n",
      "5   5  female   26   156.0    56.0      19.0       100.0       40.5     103.0\n",
      "6   6  female   21   172.0    73.0       3.0        81.0       38.3       9.0\n",
      "7   7    male   46   188.0    94.0      23.0       100.0       40.8     145.0\n",
      "8   8  female   33   166.0    63.0      25.0       107.0       40.5     161.0\n",
      "9   9    male   65   185.0    88.0      23.0       104.0       41.0     185.0 \n",
      "\n",
      "train dataset head \n",
      " \n",
      " (750000, 9) \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 9 columns):\n",
      " #   Column      Non-Null Count   Dtype  \n",
      "---  ------      --------------   -----  \n",
      " 0   id          750000 non-null  int64  \n",
      " 1   Sex         750000 non-null  object \n",
      " 2   Age         750000 non-null  int64  \n",
      " 3   Height      750000 non-null  float64\n",
      " 4   Weight      750000 non-null  float64\n",
      " 5   Duration    750000 non-null  float64\n",
      " 6   Heart_Rate  750000 non-null  float64\n",
      " 7   Body_Temp   750000 non-null  float64\n",
      " 8   Calories    750000 non-null  float64\n",
      "dtypes: float64(6), int64(2), object(1)\n",
      "memory usage: 51.5+ MB\n",
      "train dataset info \n",
      " None  \n",
      "\n",
      "\n",
      "\n",
      "            id   Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
      "149907  149907  male   20   173.0    72.0       1.0        72.0       37.9   \n",
      "305204  305204  male   20   183.0    78.0       1.0        76.0       37.7   \n",
      "675677  675677  male   25   183.0    79.0       1.0        78.0       37.7   \n",
      "449312  449312  male   21   183.0    81.0       1.0        75.0       37.8   \n",
      "256166  256166  male   24   187.0    81.0       1.0        76.0       37.7   \n",
      "...        ...   ...  ...     ...     ...       ...         ...        ...   \n",
      "68802    68802  male   29   202.0    99.0      29.0       120.0       40.7   \n",
      "460611  460611  male   76   199.0    98.0      29.0       123.0       40.8   \n",
      "530685  530685  male   75   199.0   103.0      30.0       123.0       40.5   \n",
      "184638  184638  male   79   188.0    90.0      28.0       123.0       41.0   \n",
      "427712  427712  male   69   201.0    99.0      29.0       111.0       41.1   \n",
      "\n",
      "        Calories  \n",
      "149907       1.0  \n",
      "305204       1.0  \n",
      "675677       1.0  \n",
      "449312       1.0  \n",
      "256166       1.0  \n",
      "...          ...  \n",
      "68802      314.0  \n",
      "460611     314.0  \n",
      "530685     314.0  \n",
      "184638     314.0  \n",
      "427712     314.0  \n",
      "\n",
      "[750000 rows x 9 columns]\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Calories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  Calories\n",
       "0  750000    88.283\n",
       "1  750001    88.283\n",
       "2  750002    88.283\n",
       "3  750003    88.283\n",
       "4  750004    88.283"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"train dataset head \\n \\n\" , train_dataset.head(10), \"\\n\")\n",
    "\n",
    "print(\"train dataset head \\n \\n\" , train_dataset.shape, \"\\n\")\n",
    "\n",
    "print(\"train dataset info \\n\" , train_dataset.info(), \" \\n\")\n",
    "\n",
    "print(\"\\n\")\n",
    "print(train_dataset.sort_values(by=['Calories']))\n",
    "print(\"\\n\")\n",
    "\n",
    "sample_submission.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1f39dc",
   "metadata": {
    "papermill": {
     "duration": 0.003593,
     "end_time": "2025-05-22T11:47:10.940527",
     "exception": false,
     "start_time": "2025-05-22T11:47:10.936934",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Prepare the dataset\n",
    "\n",
    "- hot encode sex to be 1 or 0 (1 if male)\n",
    "- pop the id column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0e40158c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:10.949506Z",
     "iopub.status.busy": "2025-05-22T11:47:10.949212Z",
     "iopub.status.idle": "2025-05-22T11:47:11.051331Z",
     "shell.execute_reply": "2025-05-22T11:47:11.050409Z"
    },
    "papermill": {
     "duration": 0.108473,
     "end_time": "2025-05-22T11:47:11.052821",
     "exception": false,
     "start_time": "2025-05-22T11:47:10.944348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Heart_Rate</th>\n",
       "      <th>Body_Temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>177.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>39.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>200.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>40.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>188.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>40.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>172.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>40.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>173.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>40.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249995</th>\n",
       "      <td>999995</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>159.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>39.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249996</th>\n",
       "      <td>999996</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>202.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>38.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249997</th>\n",
       "      <td>999997</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>164.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>40.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249998</th>\n",
       "      <td>999998</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>158.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>40.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249999</th>\n",
       "      <td>999999</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>199.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>39.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>250000 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp\n",
       "0       750000    1   45   177.0    81.0       7.0        87.0       39.8\n",
       "1       750001    1   26   200.0    97.0      20.0       101.0       40.5\n",
       "2       750002    0   29   188.0    85.0      16.0       102.0       40.4\n",
       "3       750003    0   39   172.0    73.0      20.0       107.0       40.6\n",
       "4       750004    0   30   173.0    67.0      16.0        94.0       40.5\n",
       "...        ...  ...  ...     ...     ...       ...         ...        ...\n",
       "249995  999995    0   56   159.0    62.0       6.0        85.0       39.4\n",
       "249996  999996    1   32   202.0   101.0       3.0        84.0       38.4\n",
       "249997  999997    0   31   164.0    64.0      14.0        98.0       40.1\n",
       "249998  999998    0   62   158.0    61.0      25.0       106.0       40.7\n",
       "249999  999999    1   31   199.0    96.0      15.0        98.0       39.9\n",
       "\n",
       "[250000 rows x 8 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def hot_encode_sex(dataset):\n",
    "    dataset[\"Sex\"] = dataset[\"Sex\"] == \"male\"\n",
    "    dataset[\"Sex\"] = (dataset[\"Sex\"]).astype('int64')\n",
    "    return dataset\n",
    "\n",
    "def pop_id(dataset):\n",
    "    dataset.pop(\"id\")\n",
    "    return dataset\n",
    "\n",
    "\n",
    "def prepare_dataset(dataset):\n",
    "    hot_encode_sex(dataset)\n",
    "    pop_id(dataset)\n",
    "    return dataset\n",
    "\n",
    "prepare_dataset(train_dataset)\n",
    "hot_encode_sex(test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "19c4fb4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:11.062623Z",
     "iopub.status.busy": "2025-05-22T11:47:11.062279Z",
     "iopub.status.idle": "2025-05-22T11:47:11.070509Z",
     "shell.execute_reply": "2025-05-22T11:47:11.069717Z"
    },
    "papermill": {
     "duration": 0.014753,
     "end_time": "2025-05-22T11:47:11.071943",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.057190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         750000\n",
       "1         750001\n",
       "2         750002\n",
       "3         750003\n",
       "4         750004\n",
       "           ...  \n",
       "249995    999995\n",
       "249996    999996\n",
       "249997    999997\n",
       "249998    999998\n",
       "249999    999999\n",
       "Name: id, Length: 250000, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_id_column = test_dataset.pop(\"id\")\n",
    "test_id_column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9315ba0",
   "metadata": {
    "papermill": {
     "duration": 0.004683,
     "end_time": "2025-05-22T11:47:11.081011",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.076328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Create the target dataset\n",
    "\n",
    "With two columns, ID and Calories\n",
    "- pop calories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ddeab79d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:11.090774Z",
     "iopub.status.busy": "2025-05-22T11:47:11.090467Z",
     "iopub.status.idle": "2025-05-22T11:47:11.096673Z",
     "shell.execute_reply": "2025-05-22T11:47:11.095815Z"
    },
    "papermill": {
     "duration": 0.012829,
     "end_time": "2025-05-22T11:47:11.098093",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.085264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_target_dataset(calories_dataset):\n",
    "    isAppendingID = False\n",
    "    \n",
    "    calories_dataset = train_dataset.pop(\"Calories\")\n",
    "    calories_dataset = calories_dataset.to_frame()\n",
    "    # calories_dataset = calories_dataset.assign(id=train_dataset[\"id\"])\n",
    "    if (isAppendingID == True):\n",
    "        calories_dataset[\"id\"] = train_dataset[\"id\"]\n",
    "        calories_dataset = calories_dataset[[\"id\", \"Calories\"]]\n",
    "    return calories_dataset\n",
    "\n",
    "calories_dataset = create_target_dataset(create_target_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d3ad0b4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:11.107900Z",
     "iopub.status.busy": "2025-05-22T11:47:11.107553Z",
     "iopub.status.idle": "2025-05-22T11:47:11.116035Z",
     "shell.execute_reply": "2025-05-22T11:47:11.115065Z"
    },
    "papermill": {
     "duration": 0.014959,
     "end_time": "2025-05-22T11:47:11.117565",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.102606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Calories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>146.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Calories\n",
       "0     150.0\n",
       "1      34.0\n",
       "2      29.0\n",
       "3     140.0\n",
       "4     146.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calories_dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e1d91d2",
   "metadata": {
    "papermill": {
     "duration": 0.004131,
     "end_time": "2025-05-22T11:47:11.126444",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.122313",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Define LGBM Model\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8f8a12a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:11.136214Z",
     "iopub.status.busy": "2025-05-22T11:47:11.135822Z",
     "iopub.status.idle": "2025-05-22T11:47:11.140500Z",
     "shell.execute_reply": "2025-05-22T11:47:11.139678Z"
    },
    "papermill": {
     "duration": 0.011341,
     "end_time": "2025-05-22T11:47:11.142023",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.130682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = lgb.LGBMRegressor()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27889d84",
   "metadata": {
    "papermill": {
     "duration": 0.003974,
     "end_time": "2025-05-22T11:47:11.150527",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.146553",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Train Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "025c1a76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:11.160306Z",
     "iopub.status.busy": "2025-05-22T11:47:11.159953Z",
     "iopub.status.idle": "2025-05-22T11:47:14.682987Z",
     "shell.execute_reply": "2025-05-22T11:47:14.682116Z"
    },
    "papermill": {
     "duration": 3.529813,
     "end_time": "2025-05-22T11:47:14.684511",
     "exception": false,
     "start_time": "2025-05-22T11:47:11.154698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.038589 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 357\n",
      "[LightGBM] [Info] Number of data points in the train set: 750000, number of used features: 7\n",
      "[LightGBM] [Info] Start training from score 88.282781\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LGBMRegressor()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_dataset, calories_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c29d364a",
   "metadata": {
    "papermill": {
     "duration": 0.005721,
     "end_time": "2025-05-22T11:47:14.695293",
     "exception": false,
     "start_time": "2025-05-22T11:47:14.689572",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Calculate Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "56d9674d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:14.705715Z",
     "iopub.status.busy": "2025-05-22T11:47:14.705436Z",
     "iopub.status.idle": "2025-05-22T11:47:15.687314Z",
     "shell.execute_reply": "2025-05-22T11:47:15.686266Z"
    },
    "papermill": {
     "duration": 0.988966,
     "end_time": "2025-05-22T11:47:15.689164",
     "exception": false,
     "start_time": "2025-05-22T11:47:14.700198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_prediction_raw = model.predict(test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "30025f17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:15.699927Z",
     "iopub.status.busy": "2025-05-22T11:47:15.699568Z",
     "iopub.status.idle": "2025-05-22T11:47:15.704757Z",
     "shell.execute_reply": "2025-05-22T11:47:15.703904Z"
    },
    "papermill": {
     "duration": 0.012314,
     "end_time": "2025-05-22T11:47:15.706124",
     "exception": false,
     "start_time": "2025-05-22T11:47:15.693810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_prediction = pd.DataFrame(model_prediction_raw, columns=[\"Calories\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cc7e9fe8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:15.716857Z",
     "iopub.status.busy": "2025-05-22T11:47:15.716544Z",
     "iopub.status.idle": "2025-05-22T11:47:15.731381Z",
     "shell.execute_reply": "2025-05-22T11:47:15.730399Z"
    },
    "papermill": {
     "duration": 0.02208,
     "end_time": "2025-05-22T11:47:15.732983",
     "exception": false,
     "start_time": "2025-05-22T11:47:15.710903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Calories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>27.035663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>109.114853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>88.796757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>128.235027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>74.265036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249995</th>\n",
       "      <td>999995</td>\n",
       "      <td>26.574796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249996</th>\n",
       "      <td>999996</td>\n",
       "      <td>9.158009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249997</th>\n",
       "      <td>999997</td>\n",
       "      <td>72.749771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249998</th>\n",
       "      <td>999998</td>\n",
       "      <td>166.892390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249999</th>\n",
       "      <td>999999</td>\n",
       "      <td>75.344601</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>250000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id    Calories\n",
       "0       750000   27.035663\n",
       "1       750001  109.114853\n",
       "2       750002   88.796757\n",
       "3       750003  128.235027\n",
       "4       750004   74.265036\n",
       "...        ...         ...\n",
       "249995  999995   26.574796\n",
       "249996  999996    9.158009\n",
       "249997  999997   72.749771\n",
       "249998  999998  166.892390\n",
       "249999  999999   75.344601\n",
       "\n",
       "[250000 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_prediction[\"id\"] = test_id_column\n",
    "model_prediction = model_prediction[[\"id\", \"Calories\"]]\n",
    "\n",
    "model_prediction\n",
    "# model_prediction.rename(columns={\"0\": \"id\", \"1 \" : \"Calories\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ec5568dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:15.744897Z",
     "iopub.status.busy": "2025-05-22T11:47:15.744035Z",
     "iopub.status.idle": "2025-05-22T11:47:15.764085Z",
     "shell.execute_reply": "2025-05-22T11:47:15.762939Z"
    },
    "papermill": {
     "duration": 0.027851,
     "end_time": "2025-05-22T11:47:15.765772",
     "exception": false,
     "start_time": "2025-05-22T11:47:15.737921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print((model_prediction[\"Calories\"] < 0).sum())\n",
    "model_prediction[\"Calories\"] = model_prediction[\"Calories\"].abs()\n",
    "print((model_prediction[\"Calories\"] < 0).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "55f6db8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-22T11:47:15.776630Z",
     "iopub.status.busy": "2025-05-22T11:47:15.776265Z",
     "iopub.status.idle": "2025-05-22T11:47:16.349895Z",
     "shell.execute_reply": "2025-05-22T11:47:16.348546Z"
    },
    "papermill": {
     "duration": 0.58094,
     "end_time": "2025-05-22T11:47:16.351560",
     "exception": false,
     "start_time": "2025-05-22T11:47:15.770620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_prediction.to_csv(\"submission.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11893428,
     "sourceId": 91716,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 50.5641,
   "end_time": "2025-05-22T11:47:19.494441",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-22T11:46:28.930341",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
