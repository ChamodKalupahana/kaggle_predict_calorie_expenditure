{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91716,"databundleVersionId":11893428,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tfa\nfrom tensorflow import keras","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-21T11:32:49.939189Z","iopub.execute_input":"2025-05-21T11:32:49.939570Z"}},"outputs":[{"name":"stderr","text":"2025-05-21 11:32:52.778708: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1747827173.088381      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1747827173.180101      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# read csv\n\ntrain_file_path = \"/kaggle/input/playground-series-s5e5/train.csv\"\ntest_file_path = \"/kaggle/input/playground-series-s5e5/test.csv\"\nsample_subbission_file_path = \"/kaggle/input/playground-series-s5e5/sample_submission.csv\"\n\n\ntrain_dataset = pd.read_csv(train_file_path)\ntest_dataset = pd.read_csv(test_file_path)\nsample_submission = pd.read_csv(sample_subbission_file_path)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"train dataset head \\n \\n\" , train_dataset.head(10), \"\\n\")\n\nprint(\"train dataset head \\n \\n\" , train_dataset.shape, \"\\n\")\n\nprint(\"train dataset info \\n\" , train_dataset.info(), \" \\n\")\n\nprint(\"\\n\")\nprint(train_dataset.sort_values(by=['Calories']))\nprint(\"\\n\")\n\nsample_submission.head()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Prepare the dataset\n\n- hot encode sex to be 1 or 0 (1 if male)\n- pop the id column","metadata":{}},{"cell_type":"code","source":"def hot_encode_sex(dataset):\n    dataset[\"Sex\"] = dataset[\"Sex\"] == \"male\"\n    dataset[\"Sex\"] = (dataset[\"Sex\"]).astype('int64')\n    return dataset\n\ndef pop_id(dataset):\n    dataset.pop(\"id\")\n    return dataset\n\n\ndef prepare_dataset(dataset):\n    hot_encode_sex(dataset)\n    pop_id(dataset)\n    return dataset\n\nprepare_dataset(train_dataset)\nhot_encode_sex(test_dataset)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_id_column = test_dataset.pop(\"id\")\ntest_id_column","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Create the target dataset\n\nWith two columns, ID and Calories\n- pop calories","metadata":{}},{"cell_type":"code","source":"def create_target_dataset(calories_dataset):\n    isAppendingID = False\n    \n    calories_dataset = train_dataset.pop(\"Calories\")\n    calories_dataset = calories_dataset.to_frame()\n    # calories_dataset = calories_dataset.assign(id=train_dataset[\"id\"])\n    if (isAppendingID == True):\n        calories_dataset[\"id\"] = train_dataset[\"id\"]\n        calories_dataset = calories_dataset[[\"id\", \"Calories\"]]\n    return calories_dataset\n\ncalories_dataset = create_target_dataset(create_target_dataset)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"calories_dataset.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Define Model\n\n","metadata":{}}]}