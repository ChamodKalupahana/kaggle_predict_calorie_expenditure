{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91716,"databundleVersionId":11893428,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:38.974604Z","iopub.execute_input":"2025-05-14T11:15:38.975237Z","iopub.status.idle":"2025-05-14T11:15:38.982029Z","shell.execute_reply.started":"2025-05-14T11:15:38.975210Z","shell.execute_reply":"2025-05-14T11:15:38.981187Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e5/sample_submission.csv\n/kaggle/input/playground-series-s5e5/train.csv\n/kaggle/input/playground-series-s5e5/test.csv\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"# read csv\n\ntrain_file_path = \"/kaggle/input/playground-series-s5e5/train.csv\"\ntest_file_path = \"/kaggle/input/playground-series-s5e5/test.csv\"\nsample_subbission_file_path = \"/kaggle/input/playground-series-s5e5/sample_submission.csv\"\n\n\ntrain_dataset = pd.read_csv(train_file_path)\ntest_dataset = pd.read_csv(test_file_path)\nsample_submission = pd.read_csv(sample_subbission_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:38.983207Z","iopub.execute_input":"2025-05-14T11:15:38.983458Z","iopub.status.idle":"2025-05-14T11:15:39.683563Z","shell.execute_reply.started":"2025-05-14T11:15:38.983438Z","shell.execute_reply":"2025-05-14T11:15:39.682799Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"print(\"train dataset head \\n \\n\" , train_dataset.head(10), \"\\n\")\n\nprint(\"train dataset head \\n \\n\" , train_dataset.shape, \"\\n\")\n\nprint(\"train dataset info \\n\" , train_dataset.info(), \" \\n\")\n\nprint(\"\\n\")\nprint(train_dataset.sort_values(by=['Calories']))\nprint(\"\\n\")\n\nsample_submission.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:39.684868Z","iopub.execute_input":"2025-05-14T11:15:39.685234Z","iopub.status.idle":"2025-05-14T11:15:39.894682Z","shell.execute_reply.started":"2025-05-14T11:15:39.685205Z","shell.execute_reply":"2025-05-14T11:15:39.893917Z"}},"outputs":[{"name":"stdout","text":"train dataset head \n \n    id     Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  Calories\n0   0    male   36   189.0    82.0      26.0       101.0       41.0     150.0\n1   1  female   64   163.0    60.0       8.0        85.0       39.7      34.0\n2   2  female   51   161.0    64.0       7.0        84.0       39.8      29.0\n3   3    male   20   192.0    90.0      25.0       105.0       40.7     140.0\n4   4  female   38   166.0    61.0      25.0       102.0       40.6     146.0\n5   5  female   26   156.0    56.0      19.0       100.0       40.5     103.0\n6   6  female   21   172.0    73.0       3.0        81.0       38.3       9.0\n7   7    male   46   188.0    94.0      23.0       100.0       40.8     145.0\n8   8  female   33   166.0    63.0      25.0       107.0       40.5     161.0\n9   9    male   65   185.0    88.0      23.0       104.0       41.0     185.0 \n\ntrain dataset head \n \n (750000, 9) \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 9 columns):\n #   Column      Non-Null Count   Dtype  \n---  ------      --------------   -----  \n 0   id          750000 non-null  int64  \n 1   Sex         750000 non-null  object \n 2   Age         750000 non-null  int64  \n 3   Height      750000 non-null  float64\n 4   Weight      750000 non-null  float64\n 5   Duration    750000 non-null  float64\n 6   Heart_Rate  750000 non-null  float64\n 7   Body_Temp   750000 non-null  float64\n 8   Calories    750000 non-null  float64\ndtypes: float64(6), int64(2), object(1)\nmemory usage: 51.5+ MB\ntrain dataset info \n None  \n\n\n\n            id   Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n149907  149907  male   20   173.0    72.0       1.0        72.0       37.9   \n305204  305204  male   20   183.0    78.0       1.0        76.0       37.7   \n675677  675677  male   25   183.0    79.0       1.0        78.0       37.7   \n449312  449312  male   21   183.0    81.0       1.0        75.0       37.8   \n256166  256166  male   24   187.0    81.0       1.0        76.0       37.7   \n...        ...   ...  ...     ...     ...       ...         ...        ...   \n68802    68802  male   29   202.0    99.0      29.0       120.0       40.7   \n460611  460611  male   76   199.0    98.0      29.0       123.0       40.8   \n530685  530685  male   75   199.0   103.0      30.0       123.0       40.5   \n184638  184638  male   79   188.0    90.0      28.0       123.0       41.0   \n427712  427712  male   69   201.0    99.0      29.0       111.0       41.1   \n\n        Calories  \n149907       1.0  \n305204       1.0  \n675677       1.0  \n449312       1.0  \n256166       1.0  \n...          ...  \n68802      314.0  \n460611     314.0  \n530685     314.0  \n184638     314.0  \n427712     314.0  \n\n[750000 rows x 9 columns]\n\n\n","output_type":"stream"},{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"       id  Calories\n0  750000    88.283\n1  750001    88.283\n2  750002    88.283\n3  750003    88.283\n4  750004    88.283","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>88.283</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>88.283</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"### Prepare the dataset","metadata":{}},{"cell_type":"code","source":"def hot_encode_sex(dataset):\n    dataset[\"Sex\"] = dataset[\"Sex\"] == \"male\"\n    dataset[\"Sex\"] = (dataset[\"Sex\"]).astype('int64')\n    return dataset\n    \nhot_encode_sex(train_dataset)\nhot_encode_sex(test_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:39.895602Z","iopub.execute_input":"2025-05-14T11:15:39.895832Z","iopub.status.idle":"2025-05-14T11:15:39.991357Z","shell.execute_reply.started":"2025-05-14T11:15:39.895809Z","shell.execute_reply":"2025-05-14T11:15:39.990722Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp\n0       750000    1   45   177.0    81.0       7.0        87.0       39.8\n1       750001    1   26   200.0    97.0      20.0       101.0       40.5\n2       750002    0   29   188.0    85.0      16.0       102.0       40.4\n3       750003    0   39   172.0    73.0      20.0       107.0       40.6\n4       750004    0   30   173.0    67.0      16.0        94.0       40.5\n...        ...  ...  ...     ...     ...       ...         ...        ...\n249995  999995    0   56   159.0    62.0       6.0        85.0       39.4\n249996  999996    1   32   202.0   101.0       3.0        84.0       38.4\n249997  999997    0   31   164.0    64.0      14.0        98.0       40.1\n249998  999998    0   62   158.0    61.0      25.0       106.0       40.7\n249999  999999    1   31   199.0    96.0      15.0        98.0       39.9\n\n[250000 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Duration</th>\n      <th>Heart_Rate</th>\n      <th>Body_Temp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>1</td>\n      <td>45</td>\n      <td>177.0</td>\n      <td>81.0</td>\n      <td>7.0</td>\n      <td>87.0</td>\n      <td>39.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>1</td>\n      <td>26</td>\n      <td>200.0</td>\n      <td>97.0</td>\n      <td>20.0</td>\n      <td>101.0</td>\n      <td>40.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>0</td>\n      <td>29</td>\n      <td>188.0</td>\n      <td>85.0</td>\n      <td>16.0</td>\n      <td>102.0</td>\n      <td>40.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>0</td>\n      <td>39</td>\n      <td>172.0</td>\n      <td>73.0</td>\n      <td>20.0</td>\n      <td>107.0</td>\n      <td>40.6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>0</td>\n      <td>30</td>\n      <td>173.0</td>\n      <td>67.0</td>\n      <td>16.0</td>\n      <td>94.0</td>\n      <td>40.5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>249995</th>\n      <td>999995</td>\n      <td>0</td>\n      <td>56</td>\n      <td>159.0</td>\n      <td>62.0</td>\n      <td>6.0</td>\n      <td>85.0</td>\n      <td>39.4</td>\n    </tr>\n    <tr>\n      <th>249996</th>\n      <td>999996</td>\n      <td>1</td>\n      <td>32</td>\n      <td>202.0</td>\n      <td>101.0</td>\n      <td>3.0</td>\n      <td>84.0</td>\n      <td>38.4</td>\n    </tr>\n    <tr>\n      <th>249997</th>\n      <td>999997</td>\n      <td>0</td>\n      <td>31</td>\n      <td>164.0</td>\n      <td>64.0</td>\n      <td>14.0</td>\n      <td>98.0</td>\n      <td>40.1</td>\n    </tr>\n    <tr>\n      <th>249998</th>\n      <td>999998</td>\n      <td>0</td>\n      <td>62</td>\n      <td>158.0</td>\n      <td>61.0</td>\n      <td>25.0</td>\n      <td>106.0</td>\n      <td>40.7</td>\n    </tr>\n    <tr>\n      <th>249999</th>\n      <td>999999</td>\n      <td>1</td>\n      <td>31</td>\n      <td>199.0</td>\n      <td>96.0</td>\n      <td>15.0</td>\n      <td>98.0</td>\n      <td>39.9</td>\n    </tr>\n  </tbody>\n</table>\n<p>250000 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":44},{"cell_type":"markdown","source":"### Create the target dataset\n\nWith two columns, ID and Calories\n- pop calories\n- copy d\n- reorder id to be 1st","metadata":{}},{"cell_type":"code","source":"calories_dataset = train_dataset.pop(\"Calories\")\ncalories_dataset = calories_dataset.to_frame()\n# calories_dataset = calories_dataset.assign(id=train_dataset[\"id\"])\ncalories_dataset[\"id\"] = train_dataset[\"id\"]\ncalories_dataset = calories_dataset[[\"id\", \"Calories\"]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:39.992763Z","iopub.execute_input":"2025-05-14T11:15:39.993003Z","iopub.status.idle":"2025-05-14T11:15:40.003969Z","shell.execute_reply.started":"2025-05-14T11:15:39.992984Z","shell.execute_reply":"2025-05-14T11:15:40.003192Z"}},"outputs":[],"execution_count":45},{"cell_type":"markdown","source":"calories_dataset","metadata":{}},{"cell_type":"code","source":"calories_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:40.004659Z","iopub.execute_input":"2025-05-14T11:15:40.004920Z","iopub.status.idle":"2025-05-14T11:15:40.015407Z","shell.execute_reply.started":"2025-05-14T11:15:40.004895Z","shell.execute_reply":"2025-05-14T11:15:40.014589Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"   id  Calories\n0   0     150.0\n1   1      34.0\n2   2      29.0\n3   3     140.0\n4   4     146.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>34.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>140.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>146.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def get_model():\n    model = keras.Sequential([\n        keras.layers.InputLayer(shape=(8,)),\n        keras.layers.Dense(8),\n        keras.layers.Dense(4),\n        keras.layers.Dense(2),\n    ])\n    return model\n\ndnn_model = get_model()\n\nprint(dnn_model.summary())\n\ntesting = False\nepochs = 1\noptimizer = \"adam\"\nloss = keras.losses.MeanAbsoluteError()\n\ndnn_model.compile(optimizer=optimizer,\n                  loss = loss,\n                  metrics = [keras.metrics.RootMeanSquaredError]\n                 )\n\nhistory = dnn_model.fit(train_dataset, calories_dataset, epochs = epochs)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:15:40.016289Z","iopub.execute_input":"2025-05-14T11:15:40.016582Z","iopub.status.idle":"2025-05-14T11:16:04.554190Z","shell.execute_reply.started":"2025-05-14T11:15:40.016557Z","shell.execute_reply":"2025-05-14T11:16:04.553370Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_3\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_3\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense_9 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │              \u001b[38;5;34m72\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_10 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │              \u001b[38;5;34m36\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_11 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │              \u001b[38;5;34m10\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">72</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m118\u001b[0m (472.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">118</span> (472.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m118\u001b[0m (472.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">118</span> (472.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"None\n\u001b[1m23438/23438\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 981us/step - loss: 3367.9963 - root_mean_squared_error: 20297.5508\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"model_prediction_raw = dnn_model.predict(test_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:29:16.175813Z","iopub.execute_input":"2025-05-14T11:29:16.176531Z","iopub.status.idle":"2025-05-14T11:29:25.353093Z","shell.execute_reply.started":"2025-05-14T11:29:16.176502Z","shell.execute_reply":"2025-05-14T11:29:25.352378Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m7813/7813\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 841us/step\n","output_type":"stream"}],"execution_count":69},{"cell_type":"markdown","source":"### Send off submission","metadata":{}},{"cell_type":"code","source":"model_prediction = pd.DataFrame(model_prediction_raw, columns=[\"id\", \"Calories\"])\nmodel_prediction\n# model_prediction.rename(columns={\"0\": \"id\", \"1 \" : \"Calories\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:32:00.997452Z","iopub.execute_input":"2025-05-14T11:32:00.997721Z","iopub.status.idle":"2025-05-14T11:32:01.008637Z","shell.execute_reply.started":"2025-05-14T11:32:00.997705Z","shell.execute_reply":"2025-05-14T11:32:01.007816Z"}},"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"                 id     Calories\n0       748412.3125   766.664429\n1       748403.0625   820.945679\n2       748404.6250   805.164429\n3       748407.3750   828.726929\n4       748410.6875   804.539429\n...             ...          ...\n249995  997881.1250  1005.148804\n249996  997873.8750   981.164429\n249997  997873.5000  1036.930054\n249998  997879.1250  1097.523804\n249999  997873.0625  1038.555054\n\n[250000 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>748412.3125</td>\n      <td>766.664429</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>748403.0625</td>\n      <td>820.945679</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>748404.6250</td>\n      <td>805.164429</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>748407.3750</td>\n      <td>828.726929</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>748410.6875</td>\n      <td>804.539429</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>249995</th>\n      <td>997881.1250</td>\n      <td>1005.148804</td>\n    </tr>\n    <tr>\n      <th>249996</th>\n      <td>997873.8750</td>\n      <td>981.164429</td>\n    </tr>\n    <tr>\n      <th>249997</th>\n      <td>997873.5000</td>\n      <td>1036.930054</td>\n    </tr>\n    <tr>\n      <th>249998</th>\n      <td>997879.1250</td>\n      <td>1097.523804</td>\n    </tr>\n    <tr>\n      <th>249999</th>\n      <td>997873.0625</td>\n      <td>1038.555054</td>\n    </tr>\n  </tbody>\n</table>\n<p>250000 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":81},{"cell_type":"code","source":"model_prediction.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-14T11:32:22.328653Z","iopub.execute_input":"2025-05-14T11:32:22.329265Z","iopub.status.idle":"2025-05-14T11:32:22.834160Z","shell.execute_reply.started":"2025-05-14T11:32:22.329236Z","shell.execute_reply":"2025-05-14T11:32:22.833312Z"}},"outputs":[],"execution_count":83},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}