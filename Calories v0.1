{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2cf0d3c9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-13T11:34:42.802083Z",
     "iopub.status.busy": "2025-05-13T11:34:42.801147Z",
     "iopub.status.idle": "2025-05-13T11:35:02.308839Z",
     "shell.execute_reply": "2025-05-13T11:35:02.307746Z"
    },
    "papermill": {
     "duration": 19.513158,
     "end_time": "2025-05-13T11:35:02.310406",
     "exception": false,
     "start_time": "2025-05-13T11:34:42.797248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-13 11:34:46.857507: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1747136087.148051      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1747136087.234010      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e5/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e5/train.csv\n",
      "/kaggle/input/playground-series-s5e5/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "884fb2e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T11:35:02.316512Z",
     "iopub.status.busy": "2025-05-13T11:35:02.315907Z",
     "iopub.status.idle": "2025-05-13T11:35:03.570476Z",
     "shell.execute_reply": "2025-05-13T11:35:03.569431Z"
    },
    "papermill": {
     "duration": 1.259304,
     "end_time": "2025-05-13T11:35:03.572237",
     "exception": false,
     "start_time": "2025-05-13T11:35:02.312933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# read csv\n",
    "\n",
    "train_file_path = \"/kaggle/input/playground-series-s5e5/train.csv\"\n",
    "test_file_path = \"/kaggle/input/playground-series-s5e5/test.csv\"\n",
    "sample_subbission_file_path = \"/kaggle/input/playground-series-s5e5/sample_submission.csv\"\n",
    "\n",
    "\n",
    "train_dataset = pd.read_csv(train_file_path)\n",
    "test_dataset = pd.read_csv(test_file_path)\n",
    "sample_submission = pd.read_csv(sample_subbission_file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd35094c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T11:35:03.581879Z",
     "iopub.status.busy": "2025-05-13T11:35:03.581164Z",
     "iopub.status.idle": "2025-05-13T11:35:03.864287Z",
     "shell.execute_reply": "2025-05-13T11:35:03.863232Z"
    },
    "papermill": {
     "duration": 0.289144,
     "end_time": "2025-05-13T11:35:03.865777",
     "exception": false,
     "start_time": "2025-05-13T11:35:03.576633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train dataset head \n",
      " \n",
      "    id     Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  Calories\n",
      "0   0    male   36   189.0    82.0      26.0       101.0       41.0     150.0\n",
      "1   1  female   64   163.0    60.0       8.0        85.0       39.7      34.0\n",
      "2   2  female   51   161.0    64.0       7.0        84.0       39.8      29.0\n",
      "3   3    male   20   192.0    90.0      25.0       105.0       40.7     140.0\n",
      "4   4  female   38   166.0    61.0      25.0       102.0       40.6     146.0\n",
      "5   5  female   26   156.0    56.0      19.0       100.0       40.5     103.0\n",
      "6   6  female   21   172.0    73.0       3.0        81.0       38.3       9.0\n",
      "7   7    male   46   188.0    94.0      23.0       100.0       40.8     145.0\n",
      "8   8  female   33   166.0    63.0      25.0       107.0       40.5     161.0\n",
      "9   9    male   65   185.0    88.0      23.0       104.0       41.0     185.0 \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 9 columns):\n",
      " #   Column      Non-Null Count   Dtype  \n",
      "---  ------      --------------   -----  \n",
      " 0   id          750000 non-null  int64  \n",
      " 1   Sex         750000 non-null  object \n",
      " 2   Age         750000 non-null  int64  \n",
      " 3   Height      750000 non-null  float64\n",
      " 4   Weight      750000 non-null  float64\n",
      " 5   Duration    750000 non-null  float64\n",
      " 6   Heart_Rate  750000 non-null  float64\n",
      " 7   Body_Temp   750000 non-null  float64\n",
      " 8   Calories    750000 non-null  float64\n",
      "dtypes: float64(6), int64(2), object(1)\n",
      "memory usage: 51.5+ MB\n",
      "train dataset info \n",
      " None  \n",
      "\n",
      "\n",
      "\n",
      "            id   Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
      "149907  149907  male   20   173.0    72.0       1.0        72.0       37.9   \n",
      "305204  305204  male   20   183.0    78.0       1.0        76.0       37.7   \n",
      "675677  675677  male   25   183.0    79.0       1.0        78.0       37.7   \n",
      "449312  449312  male   21   183.0    81.0       1.0        75.0       37.8   \n",
      "256166  256166  male   24   187.0    81.0       1.0        76.0       37.7   \n",
      "...        ...   ...  ...     ...     ...       ...         ...        ...   \n",
      "68802    68802  male   29   202.0    99.0      29.0       120.0       40.7   \n",
      "460611  460611  male   76   199.0    98.0      29.0       123.0       40.8   \n",
      "530685  530685  male   75   199.0   103.0      30.0       123.0       40.5   \n",
      "184638  184638  male   79   188.0    90.0      28.0       123.0       41.0   \n",
      "427712  427712  male   69   201.0    99.0      29.0       111.0       41.1   \n",
      "\n",
      "        Calories  \n",
      "149907       1.0  \n",
      "305204       1.0  \n",
      "675677       1.0  \n",
      "449312       1.0  \n",
      "256166       1.0  \n",
      "...          ...  \n",
      "68802      314.0  \n",
      "460611     314.0  \n",
      "530685     314.0  \n",
      "184638     314.0  \n",
      "427712     314.0  \n",
      "\n",
      "[750000 rows x 9 columns]\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Calories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>88.283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  Calories\n",
       "0  750000    88.283\n",
       "1  750001    88.283\n",
       "2  750002    88.283\n",
       "3  750003    88.283\n",
       "4  750004    88.283"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"train dataset head \\n \\n\" , train_dataset.head(10), \"\\n\")\n",
    "\n",
    "print(\"train dataset info \\n\" , train_dataset.info(), \" \\n\")\n",
    "\n",
    "print(\"\\n\")\n",
    "print(train_dataset.sort_values(by=['Calories']))\n",
    "print(\"\\n\")\n",
    "\n",
    "sample_submission.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e85d18ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T11:35:03.871587Z",
     "iopub.status.busy": "2025-05-13T11:35:03.871253Z",
     "iopub.status.idle": "2025-05-13T11:35:04.058689Z",
     "shell.execute_reply": "2025-05-13T11:35:04.057773Z"
    },
    "papermill": {
     "duration": 0.192381,
     "end_time": "2025-05-13T11:35:04.060522",
     "exception": false,
     "start_time": "2025-05-13T11:35:03.868141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-13 11:35:03.958274: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">80</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │              \u001b[38;5;34m80\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │              \u001b[38;5;34m36\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m5\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">121</span> (484.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m121\u001b[0m (484.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">121</span> (484.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m121\u001b[0m (484.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "def get_model():\n",
    "    model = keras.Sequential([\n",
    "        keras.layers.InputLayer(shape=(9,)),\n",
    "        keras.layers.Dense(8),\n",
    "        keras.layers.Dense(4),\n",
    "        keras.layers.Dense(1),\n",
    "    ])\n",
    "    return model\n",
    "\n",
    "dnn_model = get_model()\n",
    "\n",
    "print(dnn_model.summary())\n",
    "\n",
    "testing = False\n",
    "epochs = 1\n",
    "optimizer = \"adam\"\n",
    "loss = keras.losses.MeanAbsoluteError()\n",
    "\n",
    "dnn_model.compile(optimizer=optimizer,\n",
    "                  loss = loss,\n",
    "                  metrics = [keras.metrics.RootMeanSquaredError]\n",
    "                 )\n",
    "\n",
    "# dnn_model.fit(train_dataset, epochs = epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11fdffb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T11:35:04.068337Z",
     "iopub.status.busy": "2025-05-13T11:35:04.067473Z",
     "iopub.status.idle": "2025-05-13T11:35:04.073377Z",
     "shell.execute_reply": "2025-05-13T11:35:04.072408Z"
    },
    "papermill": {
     "duration": 0.011115,
     "end_time": "2025-05-13T11:35:04.074828",
     "exception": false,
     "start_time": "2025-05-13T11:35:04.063713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\""
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11893428,
     "sourceId": 91716,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 29.791589,
   "end_time": "2025-05-13T11:35:06.893317",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-13T11:34:37.101728",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
